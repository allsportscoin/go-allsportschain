pragma solidity ^0.4.16;

contract owned {
    address public owner;
    constructor() public {
        owner = msg.sender;
    }
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
}

contract restriction {
    modifier lengthLimit(string name) {
        bytes memory strBytes = bytes(name);
        require(strBytes.length>10, "domain length too short");
        _;
    }
}

contract stringLib {

    function bytes32ToString(bytes32 x) internal pure returns (string) {
        bytes memory bytesString = new bytes(32);
        uint charCount = 0;
        for (uint j = 0; j < 32; j++) {
            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));
            if (char != 0) {
                bytesString[charCount] = char;
                charCount++;
            }
        }
        bytes memory bytesStringTrimmed = new bytes(charCount);
        for (j = 0; j < charCount; j++) {
            bytesStringTrimmed[j] = bytesString[j];
        }
        return string(bytesStringTrimmed);
    }

    function bytes32ArrayToString(bytes32[] data) internal pure returns (string) {
        bytes memory bytesString = new bytes(data.length * 32);
        uint urlLength;
        for (uint i = 0; i< data.length; i++) {
            for (uint j = 0; j < 32; j++) {
                byte char = byte(bytes32(uint(data[i]) * 2 ** (8 * j)));
                if (char != 0) {
                    bytesString[urlLength] = char;
                    urlLength += 1;
                }
            }
        }
        bytes memory bytesStringTrimmed = new bytes(urlLength);
        for (i = 0; i < urlLength; i++) {
            bytesStringTrimmed[i] = bytesString[i];
        }
        return string(bytesStringTrimmed);
    }

    function strConcat(string _a, string _b) internal pure returns (string){
        bytes memory _ba = bytes(_a);
        bytes memory _bb = bytes(_b);

        string memory abcde = new string(_ba.length + _bb.length);
        bytes memory babcde = bytes(abcde);
        uint k = 0;
        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];
        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];

        return string(babcde);
    }

    function validAlias(string _a, string _s) internal pure returns(bool) {
        bytes memory _ba = bytes(_a);
        bytes memory _bs = bytes(_s);

        for (uint i=0; i<_bs.length; i++) {
            if(_ba[_ba.length-i-1] == _bs[_bs.length-i-1]) {
                continue;
            } else {
                return false;
            }
        }
        return true;
    }
}

contract SocResolver is owned, restriction, stringLib {
    //format like ".soc"
    string public Suffix;

    struct Alias {
        string name;
        address addr;
        bool isUsed;
    }

    mapping(string=>Alias) Aliases;

    mapping(address=>string) AddressToAlias;
    string[] AliasNames;

    event SetAlias(string aliasName, address aliasAddr);

    constructor(string _suffix) public {
        Suffix = _suffix;
    }

    function setVipAlias(string _aliasName, address _aliasAddr) public onlyOwner {
        require(validAlias(_aliasName, Suffix), "invalid alias format.");
        require(!Aliases[_aliasName].isUsed, "alias already exists");
        require(_aliasAddr != address(0x0), "empty address not allowed");
        require(bytes(AddressToAlias[_aliasAddr]).length==0, "address already bind to another alias");

        AliasNames.push(_aliasName);
        AddressToAlias[_aliasAddr] = _aliasName;
        Aliases[_aliasName] = Alias(_aliasName, _aliasAddr, true);

        emit SetAlias(_aliasName, _aliasAddr);
    }

    function setAlias(string _aliasName, address _aliasAddr) public payable lengthLimit(_aliasName) {
        require(validAlias(_aliasName, Suffix), "invalid alias format.");
        require(!Aliases[_aliasName].isUsed, "alias already exists");
        if(_aliasAddr == address(0x0)) {
            _aliasAddr = msg.sender;
        }
        require(bytes(AddressToAlias[_aliasAddr]).length==0, "address already bind to another alias");

        AliasNames.push(_aliasName);
        AddressToAlias[_aliasAddr] = _aliasName;
        Aliases[_aliasName] = Alias(_aliasName, _aliasAddr, true);

        emit SetAlias(_aliasName, _aliasAddr);
    }

    function getAddrByAlias(string _aliasName) public view returns(address) {
        require(Aliases[_aliasName].isUsed, "alias name not exists");
        Alias memory _alias = Aliases[_aliasName];
        return _alias.addr;
    }

    function getAliasByAddr(address _addr) public view returns(string) {
        require(bytes(AddressToAlias[_addr]).length>0, "alias of _addr not exists");
        Alias memory _alias = Aliases[AddressToAlias[_addr]];
        return _alias.name;
    }

    function supportSNSInterface(bytes4 _interfaceId) public pure returns(bool) {
        return this.getAddrByAlias.selector==_interfaceId ||
            this.getAliasByAddr.selector==_interfaceId ||
            this.setAlias.selector==_interfaceId ||
            this.supportSNSInterface.selector==_interfaceId;
    }

    function getInterface() public pure returns(bytes4[]) {
        bytes4[] memory res = new bytes4[](4);
        res[0] = bytes4(keccak256("setAlias(string,address)"));
        res[1] = bytes4(keccak256("getAddrByAlias(string)"));
        res[2] = bytes4(keccak256("getAliasByAddr(address)"));
        res[3] = bytes4(keccak256("supportSNSInterface(bytes4)"));

        return res;
    }

    function withDraw(address addr) public onlyOwner {
        require(addr != 0x0);
        addr.transfer(address(this).balance);
    }
}